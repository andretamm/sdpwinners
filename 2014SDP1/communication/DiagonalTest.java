package communication;

public class DiagonalTest {
	//bytes to send to registers on the I2C boards
	private static byte forward; 
	private static byte backward; 
	private static byte off;
	
	// Used to tune the maximum speed for the diagonal movement
	static double MAXIMUMSPEED = 120;
	
	public static void main(String[] args) {
		// Init direction bytes
		forward = (byte)1; 
		backward = (byte)2; 
		off = (byte)0;
		
		
		moveDiagonally(130);
		
		
	}
	
	public static int aEAST = 0;
	public static int aSOUTH = 1;
	public static int aNORTH = 2;
	public static int aWEST = 3;
	
	public static double[] sinLookup = {0, 0, 0, 0, 0, 0, 0.104528463268, 0.121869343405, 0.13917310096, 0.15643446504, 0.173648177667, 0.190808995377, 0.207911690818, 0.224951054344, 0.2419218956, 0.258819045103, 0.275637355817, 0.292371704723, 0.309016994375, 0.325568154457, 0.342020143326, 0.358367949545, 0.374606593416, 0.390731128489, 0.406736643076, 0.422618261741, 0.438371146789, 0.45399049974, 0.469471562786, 0.484809620246, 0.5, 0.51503807491, 0.529919264233, 0.544639035015, 0.559192903471, 0.573576436351, 0.587785252292, 0.601815023152, 0.615661475326, 0.62932039105, 0.642787609687, 0.656059028991, 0.669130606359, 0.681998360062, 0.694658370459, 0.707106781187, 0.719339800339, 0.731353701619, 0.743144825477, 0.754709580223, 0.766044443119, 0.777145961457, 0.788010753607, 0.798635510047, 0.809016994375, 0.819152044289, 0.829037572555, 0.838670567945, 0.848048096156, 0.857167300702, 0.866025403784, 0.874619707139, 0.882947592859, 0.891006524188, 0.898794046299, 0.906307787037, 0.913545457643, 0.920504853452, 0.927183854567, 0.933580426497, 0.939692620786, 0.945518575599, 0.951056516295, 0.956304755963, 0.961261695938, 0.965925826289, 0.970295726276, 0.974370064785, 0.978147600734, 0.981627183448, 0.984807753012, 0.987688340595, 0.990268068742, 0.992546151641, 0.994521895368, 0.996194698092, 0.99756405026, 0.998629534755, 0.999390827019, 0.999847695156, 1.0, 0.999847695156, 0.999390827019, 0.998629534755, 0.99756405026, 0.996194698092, 0.994521895368, 0.992546151641, 0.990268068742, 0.987688340595, 0.984807753012, 0.981627183448, 0.978147600734, 0.974370064785, 0.970295726276, 0.965925826289, 0.961261695938, 0.956304755963, 0.951056516295, 0.945518575599, 0.939692620786, 0.933580426497, 0.927183854567, 0.920504853452, 0.913545457643, 0.906307787037, 0.898794046299, 0.891006524188, 0.882947592859, 0.874619707139, 0.866025403784, 0.857167300702, 0.848048096156, 0.838670567945, 0.829037572555, 0.819152044289, 0.809016994375, 0.798635510047, 0.788010753607, 0.777145961457, 0.766044443119, 0.754709580223, 0.743144825477, 0.731353701619, 0.719339800339, 0.707106781187, 0.694658370459, 0.681998360062, 0.669130606359, 0.656059028991, 0.642787609687, 0.62932039105, 0.615661475326, 0.601815023152, 0.587785252292, 0.573576436351, 0.559192903471, 0.544639035015, 0.529919264233, 0.51503807491, 0.5, 0.484809620246, 0.469471562786, 0.45399049974, 0.438371146789, 0.422618261741, 0.406736643076, 0.390731128489, 0.374606593416, 0.358367949545, 0.342020143326, 0.325568154457, 0.309016994375, 0.292371704723, 0.275637355817, 0.258819045103, 0.2419218956, 0.224951054344, 0.207911690818, 0.190808995377, 0.173648177667, 0.15643446504, 0.13917310096, 0.121869343405, 0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.104528463268, -0.121869343405, -0.13917310096, -0.15643446504, -0.173648177667, -0.190808995377, -0.207911690818, -0.224951054344, -0.2419218956, -0.258819045103, -0.275637355817, -0.292371704723, -0.309016994375, -0.325568154457, -0.342020143326, -0.358367949545, -0.374606593416, -0.390731128489, -0.406736643076, -0.422618261741, -0.438371146789, -0.45399049974, -0.469471562786, -0.484809620246, -0.5, -0.51503807491, -0.529919264233, -0.544639035015, -0.559192903471, -0.573576436351, -0.587785252292, -0.601815023152, -0.615661475326, -0.62932039105, -0.642787609687, -0.656059028991, -0.669130606359, -0.681998360062, -0.694658370459, -0.707106781187, -0.719339800339, -0.731353701619, -0.743144825477, -0.754709580223, -0.766044443119, -0.777145961457, -0.788010753607, -0.798635510047, -0.809016994375, -0.819152044289, -0.829037572555, -0.838670567945, -0.848048096156, -0.857167300702, -0.866025403784, -0.874619707139, -0.882947592859, -0.891006524188, -0.898794046299, -0.906307787037, -0.913545457643, -0.920504853452, -0.927183854567, -0.933580426497, -0.939692620786, -0.945518575599, -0.951056516295, -0.956304755963, -0.961261695938, -0.965925826289, -0.970295726276, -0.974370064785, -0.978147600734, -0.981627183448, -0.984807753012, -0.987688340595, -0.990268068742, -0.992546151641, -0.994521895368, -0.996194698092, -0.99756405026, -0.998629534755, -0.999390827019, -0.999847695156, -1.0, -0.999847695156, -0.999390827019, -0.998629534755, -0.99756405026, -0.996194698092, -0.994521895368, -0.992546151641, -0.990268068742, -0.987688340595, -0.984807753012, -0.981627183448, -0.978147600734, -0.974370064785, -0.970295726276, -0.965925826289, -0.961261695938, -0.956304755963, -0.951056516295, -0.945518575599, -0.939692620786, -0.933580426497, -0.927183854567, -0.920504853452, -0.913545457643, -0.906307787037, -0.898794046299, -0.891006524188, -0.882947592859, -0.874619707139, -0.866025403784, -0.857167300702, -0.848048096156, -0.838670567945, -0.829037572555, -0.819152044289, -0.809016994375, -0.798635510047, -0.788010753607, -0.777145961457, -0.766044443119, -0.754709580223, -0.743144825477, -0.731353701619, -0.719339800339, -0.707106781187, -0.694658370459, -0.681998360062, -0.669130606359, -0.656059028991, -0.642787609687, -0.62932039105, -0.615661475326, -0.601815023152, -0.587785252292, -0.573576436351, -0.559192903471, -0.544639035015, -0.529919264233, -0.51503807491, -0.5, -0.484809620246, -0.469471562786, -0.45399049974, -0.438371146789, -0.422618261741, -0.406736643076, -0.390731128489, -0.374606593416, -0.358367949545, -0.342020143326, -0.325568154457, -0.309016994375, -0.292371704723, -0.275637355817, -0.258819045103, -0.2419218956, -0.224951054344, -0.207911690818, -0.190808995377, -0.173648177667, -0.15643446504, -0.13917310096, -0.121869343405, -0.104528463268, 0, 0, 0, 0, 0};
	public static double[] cosLookup = {1.0, 0.999847695156, 0.999390827019, 0.998629534755, 0.99756405026, 0.996194698092, 0.994521895368, 0.992546151641, 0.990268068742, 0.987688340595, 0.984807753012, 0.981627183448, 0.978147600734, 0.974370064785, 0.970295726276, 0.965925826289, 0.961261695938, 0.956304755963, 0.951056516295, 0.945518575599, 0.939692620786, 0.933580426497, 0.927183854567, 0.920504853452, 0.913545457643, 0.906307787037, 0.898794046299, 0.891006524188, 0.882947592859, 0.874619707139, 0.866025403784, 0.857167300702, 0.848048096156, 0.838670567945, 0.829037572555, 0.819152044289, 0.809016994375, 0.798635510047, 0.788010753607, 0.777145961457, 0.766044443119, 0.754709580223, 0.743144825477, 0.731353701619, 0.719339800339, 0.707106781187, 0.694658370459, 0.681998360062, 0.669130606359, 0.656059028991, 0.642787609687, 0.62932039105, 0.615661475326, 0.601815023152, 0.587785252292, 0.573576436351, 0.559192903471, 0.544639035015, 0.529919264233, 0.51503807491, 0.5, 0.484809620246, 0.469471562786, 0.45399049974, 0.438371146789, 0.422618261741, 0.406736643076, 0.390731128489, 0.374606593416, 0.358367949545, 0.342020143326, 0.325568154457, 0.309016994375, 0.292371704723, 0.275637355817, 0.258819045103, 0.2419218956, 0.224951054344, 0.207911690818, 0.190808995377, 0.173648177667, 0.15643446504, 0.13917310096, 0.121869343405, 0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.104528463268, -0.121869343405, -0.13917310096, -0.15643446504, -0.173648177667, -0.190808995377, -0.207911690818, -0.224951054344, -0.2419218956, -0.258819045103, -0.275637355817, -0.292371704723, -0.309016994375, -0.325568154457, -0.342020143326, -0.358367949545, -0.374606593416, -0.390731128489, -0.406736643076, -0.422618261741, -0.438371146789, -0.45399049974, -0.469471562786, -0.484809620246, -0.5, -0.51503807491, -0.529919264233, -0.544639035015, -0.559192903471, -0.573576436351, -0.587785252292, -0.601815023152, -0.615661475326, -0.62932039105, -0.642787609687, -0.656059028991, -0.669130606359, -0.681998360062, -0.694658370459, -0.707106781187, -0.719339800339, -0.731353701619, -0.743144825477, -0.754709580223, -0.766044443119, -0.777145961457, -0.788010753607, -0.798635510047, -0.809016994375, -0.819152044289, -0.829037572555, -0.838670567945, -0.848048096156, -0.857167300702, -0.866025403784, -0.874619707139, -0.882947592859, -0.891006524188, -0.898794046299, -0.906307787037, -0.913545457643, -0.920504853452, -0.927183854567, -0.933580426497, -0.939692620786, -0.945518575599, -0.951056516295, -0.956304755963, -0.961261695938, -0.965925826289, -0.970295726276, -0.974370064785, -0.978147600734, -0.981627183448, -0.984807753012, -0.987688340595, -0.990268068742, -0.992546151641, -0.994521895368, -0.996194698092, -0.99756405026, -0.998629534755, -0.999390827019, -0.999847695156, -1.0, -0.999847695156, -0.999390827019, -0.998629534755, -0.99756405026, -0.996194698092, -0.994521895368, -0.992546151641, -0.990268068742, -0.987688340595, -0.984807753012, -0.981627183448, -0.978147600734, -0.974370064785, -0.970295726276, -0.965925826289, -0.961261695938, -0.956304755963, -0.951056516295, -0.945518575599, -0.939692620786, -0.933580426497, -0.927183854567, -0.920504853452, -0.913545457643, -0.906307787037, -0.898794046299, -0.891006524188, -0.882947592859, -0.874619707139, -0.866025403784, -0.857167300702, -0.848048096156, -0.838670567945, -0.829037572555, -0.819152044289, -0.809016994375, -0.798635510047, -0.788010753607, -0.777145961457, -0.766044443119, -0.754709580223, -0.743144825477, -0.731353701619, -0.719339800339, -0.707106781187, -0.694658370459, -0.681998360062, -0.669130606359, -0.656059028991, -0.642787609687, -0.62932039105, -0.615661475326, -0.601815023152, -0.587785252292, -0.573576436351, -0.559192903471, -0.544639035015, -0.529919264233, -0.51503807491, -0.5, -0.484809620246, -0.469471562786, -0.45399049974, -0.438371146789, -0.422618261741, -0.406736643076, -0.390731128489, -0.374606593416, -0.358367949545, -0.342020143326, -0.325568154457, -0.309016994375, -0.292371704723, -0.275637355817, -0.258819045103, -0.2419218956, -0.224951054344, -0.207911690818, -0.190808995377, -0.173648177667, -0.15643446504, -0.13917310096, -0.121869343405, -0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.104528463268, 0.121869343405, 0.13917310096, 0.15643446504, 0.173648177667, 0.190808995377, 0.207911690818, 0.224951054344, 0.2419218956, 0.258819045103, 0.275637355817, 0.292371704723, 0.309016994375, 0.325568154457, 0.342020143326, 0.358367949545, 0.374606593416, 0.390731128489, 0.406736643076, 0.422618261741, 0.438371146789, 0.45399049974, 0.469471562786, 0.484809620246, 0.5, 0.51503807491, 0.529919264233, 0.544639035015, 0.559192903471, 0.573576436351, 0.587785252292, 0.601815023152, 0.615661475326, 0.62932039105, 0.642787609687, 0.656059028991, 0.669130606359, 0.681998360062, 0.694658370459, 0.707106781187, 0.719339800339, 0.731353701619, 0.743144825477, 0.754709580223, 0.766044443119, 0.777145961457, 0.788010753607, 0.798635510047, 0.809016994375, 0.819152044289, 0.829037572555, 0.838670567945, 0.848048096156, 0.857167300702, 0.866025403784, 0.874619707139, 0.882947592859, 0.891006524188, 0.898794046299, 0.906307787037, 0.913545457643, 0.920504853452, 0.927183854567, 0.933580426497, 0.939692620786, 0.945518575599, 0.951056516295, 0.956304755963, 0.961261695938, 0.965925826289, 0.970295726276, 0.974370064785, 0.978147600734, 0.981627183448, 0.984807753012, 0.987688340595, 0.990268068742, 0.992546151641, 0.994521895368, 0.996194698092, 0.99756405026, 0.998629534755, 0.999390827019, 0.999847695156};
	
	public static void moveDiagonally(int angle){
		byte[] speeds = diagonalSpeeds(angle);
		byte[] speeds2 = andreDiagonalSpeeds(angle);
		
		// EAST WHEEL
		System.out.println(speeds[0] + " " + speeds[1] + " EAST") ;
		System.out.println(speeds2[0] + " " + (speeds2[1] & 0xFF) + " EAST") ;

		// SOUTH Wheel
		System.out.println(speeds[2] + " " + speeds[3] + " SOUTH");
		System.out.println(speeds2[2] + " " + (speeds2[3] & 0xFF) + " SOUTH");

		// NORTH Wheel
		System.out.println(speeds[4] + " " + speeds[5] + " NORTH");
		System.out.println(speeds2[4] + " " + (speeds2[5] & 0xFF) + " NORTH");
		
		// WEST Wheel
		System.out.println(speeds[6] + " " + speeds[7] + " WEST");
		System.out.println(speeds2[6] + " " + (speeds2[7] & 0xFF) + " WEST");
		
		
		//EAST Wheel
//		System.out.println(speeds[0] + " " + speeds[1] + " EAST") ;
//		I2Csensor.sendData(0x01,speeds[0]); 
//		I2Csensor.sendData(0x02,speeds[1]); 
		//SOUTH Wheel
//		System.out.println(speeds[2] + " " + speeds[3] + " SOUTH");
//		I2Csensor.sendData(0x03,speeds[2]); 
//		I2Csensor.sendData(0x04,speeds[3]);
		//NORTH Wheel
//		System.out.println(speeds[4] + " " + speeds[5] + " NORTH");
//		I2Csensor.sendData(0x05,speeds[4]); 
//		I2Csensor.sendData(0x06,speeds[5]); 
		//WEST Wheel
//		System.out.println(speeds[6] + " " + speeds[7] + " WEST");
//		I2Csensor.sendData(0x07,speeds[6]); 
//		I2Csensor.sendData(0x08,speeds[7]);
	}
	
	public static byte[] andreDiagonalSpeeds(double angle) {
		// Init return array
		byte[] directionsAndSpeeds = new byte[8];
		
		for (int i = 0; i < 8; i++){
			directionsAndSpeeds[i] = 0;
		}
		
		// Find the speeds and movement directions through trigonometry
		int intAngle = (int) angle;
		angle = Math.toRadians(angle);
		
		
//		final double horisontalMovement = Math.cos(angle);
//		final double verticalMovement = Math.sin(angle);
		final double horisontalMovement = cosLookup[intAngle];
		final double verticalMovement = sinLookup[intAngle];
		
		// Normalise values and get them to range [40, 200]
		double maxMovement = Math.max(Math.abs(horisontalMovement), Math.abs(verticalMovement));
		
		double maxSpeed = 120;
		double minSpeed = 0; 
		byte horisontalSpeed = (byte) (Math.min(Math.abs((maxSpeed * horisontalMovement / maxMovement)), maxSpeed) + minSpeed);
		byte verticalSpeed = (byte) (Math.min(Math.abs((maxSpeed * verticalMovement / maxMovement)), maxSpeed) + minSpeed);
		
		// Save motor speeds, theyre at odd positions in the array (1, 3, 5, 7)
		directionsAndSpeeds[aEAST * 2 + 1] = verticalSpeed;
		directionsAndSpeeds[aWEST * 2 + 1] = verticalSpeed;
		directionsAndSpeeds[aNORTH * 2 + 1] = horisontalSpeed;
		directionsAndSpeeds[aSOUTH * 2 + 1] = horisontalSpeed;
		
		/* Save motor directions, they're at even positions in the array (0, 2, 4, 6) */
		
		// Vertical movement controlled by east/west wheels
		if (verticalSpeed == 0) {
			// No movement :)
			directionsAndSpeeds[aEAST * 2] =  off;
			directionsAndSpeeds[aWEST * 2] =  off;
		} else {
			// Movement - boooyaaaah
			directionsAndSpeeds[aEAST * 2] =  (verticalMovement > 0) ? forward : backward;
			directionsAndSpeeds[aWEST * 2] =  (verticalMovement > 0) ? backward : forward;
		}
		
		// Horisontal movement controlled by north/south wheels
		if (horisontalSpeed == 0) {
			// No movement :(
			directionsAndSpeeds[aNORTH * 2] =  off;
			directionsAndSpeeds[aSOUTH * 2] =  off;
		} else {
			// Movement - boooyaaaah
			directionsAndSpeeds[aNORTH * 2] =  (horisontalMovement > 0) ? forward : backward;
			directionsAndSpeeds[aSOUTH * 2] =  (horisontalMovement > 0) ? backward : forward;
		}

		return directionsAndSpeeds;
	}
	
	public static byte[] diagonalSpeeds(double mMoveDirection) {
		// Array that contains [EAST Direction, EAST Speed, SOUTH Direction, SOUTH Speed, NORTH Direction, NORTH Speed, WEST Direction, WEST Speed]
	    int EAST = 0;
		int NORTH = 1;
		int WEST = 2;
		int SOUTH = 3;
		
		
		byte[] speedAndDirection = new byte[8];
		
		for (int i = 0; i < 8; i++){
			speedAndDirection[i] = 0;
		}
		// Get the sin and cos of the movement direction
		mMoveDirection = Math.toRadians(mMoveDirection);

		final double cosDirection = Math.cos(mMoveDirection);
		final double sinDirection = Math.sin(mMoveDirection);
		
		//System.out.println("cosDirection = " + cosDirection);
		//System.out.println("sinDirection = " + sinDirection);

		double[] motorSpeed = new double[4];
		double maxSpeed = 0;

		for (int i = 0; i < 4; ++i) {

			/*
			 * 0 -> 0x01 - EAST 
			 * 1 -> 0x03 - NORTH 
			 * 2 -> 0x07 - WEST 
			 * 3 -> 0x05 - SOUTH
			 * 
			 */
			if (i == EAST) {
				motorSpeed[i] = 0;
				motorSpeed[i] += 0 * cosDirection + 1.0 * sinDirection;
			}

			if (i == NORTH) {
				motorSpeed[i] = 0;
				motorSpeed[i] += 1.0 * cosDirection + 0 * sinDirection;
			}

			if (i == WEST) {
				motorSpeed[i] = 0;
				motorSpeed[i] += 0 * cosDirection + 1.0 * sinDirection;
			}

			if (i == SOUTH) {
				motorSpeed[i] = 0;
				motorSpeed[i] += 1.0 * cosDirection +  0 * sinDirection;
			}
			
			maxSpeed = Math.max(Math.abs(motorSpeed[i]), maxSpeed);
		}

		for (int i = 0; i < motorSpeed.length; ++i) {
			motorSpeed[i] *= MAXIMUMSPEED / maxSpeed;
		}

		for (int i = 0; i < 4; ++i) {
			motorSpeed[i] = Math.min(MAXIMUMSPEED,
					(int) Math.round(motorSpeed[i]));
		}

		
		// 0x01 (I2C - Port 1) - EAST Wheel
		speedAndDirection[1] =  (byte)Math.abs(motorSpeed[0]);
		speedAndDirection[0] =  (byte)returnDirection(motorSpeed[0], EAST);
		
		// 0x03 (I2C - Port 2) - SOUTH Wheel
		speedAndDirection[3] =  (byte)Math.abs(motorSpeed[3]);
		speedAndDirection[2] =  (byte)returnDirection(motorSpeed[3], SOUTH);
		
		// 0x05 (I2C - Port 3) - NORTH Wheel
		speedAndDirection[5] =  (byte)Math.abs(motorSpeed[1]);
		speedAndDirection[4] =  (byte)returnDirection(motorSpeed[1], NORTH);
		
		// 0x07 (I2C - Port 4) - WEST Wheel
		speedAndDirection[7] =  (byte)Math.abs(motorSpeed[2]);
		speedAndDirection[6] =  (byte)returnDirection(motorSpeed[2], WEST);

	return speedAndDirection;

	}

	public static int returnDirection(double motorSpeed, int motor) {
		// Array that contains [EAST Direction, EAST Speed, SOUTH Direction, SOUTH Speed, NORTH Direction, NORTH Speed, WEST Direction, WEST Speed]
		int EAST = 0;
		int SOUTH = 1;
		int NORTH = 2;
		int WEST = 3;
		
		int forward = (byte) 1;
		int backward = (byte) 2;
		int off = (byte) 0;
		
		int direction = off;

		if (motorSpeed > 0) {
			if (motor == EAST) {
				direction = forward;
			}

			if (motor == NORTH) {
				direction = backward;
			}

			if (motor == WEST) {
				direction = backward;
			}

			if (motor == SOUTH) {
				direction = forward;
			}
		} else if (motorSpeed < 0) {
			if (motor == EAST) {
				direction = backward;
			}

			if (motor == NORTH) {
				direction = forward;
			}

			if (motor == WEST) {
				direction = forward;
			}

			if (motor == SOUTH) {
				direction = backward;
			}
		}

		return direction;
	}
}
