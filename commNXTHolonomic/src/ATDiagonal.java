import lejos.nxt.Button;
import lejos.nxt.I2CPort;
import lejos.nxt.I2CSensor;
import lejos.nxt.Motor;
import lejos.nxt.NXTRegulatedMotor;
import lejos.nxt.SensorPort;

/*            ** Forwards facing wheels **		    */
//			0x01 (I2C - Port 1) - EAST Wheel		//
//			0x07 (I2C - Port 4) - WEST Wheel		//

/*			 ** Side Ways Facing Wheels **		    */
//		    0x03 (I2C - Port 2) - SOUTH Wheel       //
//		    0x05 (I2C - Port 3) - NORTH Wheel       //

public class ATDiagonal {
	
	//Set up the I2C Board Connections and Ports. This is used for the wheels only.
	private static I2CPort I2Cport = SensorPort.S1; 
	private static I2CSensor I2Csensor = new I2CSensor(I2Cport, 0xB4, I2CPort.STANDARD_MODE, I2CSensor.TYPE_LOWSPEED_9V);
	
	//bytes to send to registers on the I2C boards
	private static byte forward; 
	private static byte backward; 
	private static byte off;
	
	// Used to tune the maximum speed for the diagonal movement
	static double MAXIMUMSPEED = 120;
	
	public static void main(String[] args) {
		// Init direction bytes
		forward = (byte)1; 
		backward = (byte)2; 
		off = (byte)0;
		
		boolean run = true;
		int moveAngle = 90;
		System.out.println(moveAngle);
		
		while(run) {
			int buttonID = Button.waitForAnyPress();
			
			if (buttonID == Button.ID_ENTER) {
				// Does the move
				moveDiagonally(moveAngle);
				
				try {
					Thread.sleep(1000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
				stop();
//				oldStop();
			} else if (buttonID == Button.ID_ESCAPE) {
				// Exit program
				run = false;
			} else if (buttonID == Button.ID_LEFT) {
				// Decrease angle by 10
				moveAngle -= 2;
				
				if (moveAngle < 0) {
					moveAngle = 0;
				}
				
				System.out.println(moveAngle);
			} else if (buttonID == Button.ID_RIGHT) {
				// Increase angle by 10
				moveAngle += 2;
				
				if (moveAngle >= 360) {
					moveAngle = 359;
				}
				
				System.out.println(moveAngle);
			}
		}
	}
	
	public static int EAST = 0;
	public static int SOUTH = 1;
	public static int NORTH = 2;
	public static int WEST = 3;
	
	public static double[] sinLookup = {0, 0, 0, 0, 0, 0, 0.104528463268, 0.121869343405, 0.13917310096, 0.15643446504, 0.173648177667, 0.190808995377, 0.207911690818, 0.224951054344, 0.2419218956, 0.258819045103, 0.275637355817, 0.292371704723, 0.309016994375, 0.325568154457, 0.342020143326, 0.358367949545, 0.374606593416, 0.390731128489, 0.406736643076, 0.422618261741, 0.438371146789, 0.45399049974, 0.469471562786, 0.484809620246, 0.5, 0.51503807491, 0.529919264233, 0.544639035015, 0.559192903471, 0.573576436351, 0.587785252292, 0.601815023152, 0.615661475326, 0.62932039105, 0.642787609687, 0.656059028991, 0.669130606359, 0.681998360062, 0.694658370459, 0.707106781187, 0.719339800339, 0.731353701619, 0.743144825477, 0.754709580223, 0.766044443119, 0.777145961457, 0.788010753607, 0.798635510047, 0.809016994375, 0.819152044289, 0.829037572555, 0.838670567945, 0.848048096156, 0.857167300702, 0.866025403784, 0.874619707139, 0.882947592859, 0.891006524188, 0.898794046299, 0.906307787037, 0.913545457643, 0.920504853452, 0.927183854567, 0.933580426497, 0.939692620786, 0.945518575599, 0.951056516295, 0.956304755963, 0.961261695938, 0.965925826289, 0.970295726276, 0.974370064785, 0.978147600734, 0.981627183448, 0.984807753012, 0.987688340595, 0.990268068742, 0.992546151641, 0.994521895368, 0.996194698092, 0.99756405026, 0.998629534755, 0.999390827019, 0.999847695156, 1.0, 0.999847695156, 0.999390827019, 0.998629534755, 0.99756405026, 0.996194698092, 0.994521895368, 0.992546151641, 0.990268068742, 0.987688340595, 0.984807753012, 0.981627183448, 0.978147600734, 0.974370064785, 0.970295726276, 0.965925826289, 0.961261695938, 0.956304755963, 0.951056516295, 0.945518575599, 0.939692620786, 0.933580426497, 0.927183854567, 0.920504853452, 0.913545457643, 0.906307787037, 0.898794046299, 0.891006524188, 0.882947592859, 0.874619707139, 0.866025403784, 0.857167300702, 0.848048096156, 0.838670567945, 0.829037572555, 0.819152044289, 0.809016994375, 0.798635510047, 0.788010753607, 0.777145961457, 0.766044443119, 0.754709580223, 0.743144825477, 0.731353701619, 0.719339800339, 0.707106781187, 0.694658370459, 0.681998360062, 0.669130606359, 0.656059028991, 0.642787609687, 0.62932039105, 0.615661475326, 0.601815023152, 0.587785252292, 0.573576436351, 0.559192903471, 0.544639035015, 0.529919264233, 0.51503807491, 0.5, 0.484809620246, 0.469471562786, 0.45399049974, 0.438371146789, 0.422618261741, 0.406736643076, 0.390731128489, 0.374606593416, 0.358367949545, 0.342020143326, 0.325568154457, 0.309016994375, 0.292371704723, 0.275637355817, 0.258819045103, 0.2419218956, 0.224951054344, 0.207911690818, 0.190808995377, 0.173648177667, 0.15643446504, 0.13917310096, 0.121869343405, 0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.104528463268, -0.121869343405, -0.13917310096, -0.15643446504, -0.173648177667, -0.190808995377, -0.207911690818, -0.224951054344, -0.2419218956, -0.258819045103, -0.275637355817, -0.292371704723, -0.309016994375, -0.325568154457, -0.342020143326, -0.358367949545, -0.374606593416, -0.390731128489, -0.406736643076, -0.422618261741, -0.438371146789, -0.45399049974, -0.469471562786, -0.484809620246, -0.5, -0.51503807491, -0.529919264233, -0.544639035015, -0.559192903471, -0.573576436351, -0.587785252292, -0.601815023152, -0.615661475326, -0.62932039105, -0.642787609687, -0.656059028991, -0.669130606359, -0.681998360062, -0.694658370459, -0.707106781187, -0.719339800339, -0.731353701619, -0.743144825477, -0.754709580223, -0.766044443119, -0.777145961457, -0.788010753607, -0.798635510047, -0.809016994375, -0.819152044289, -0.829037572555, -0.838670567945, -0.848048096156, -0.857167300702, -0.866025403784, -0.874619707139, -0.882947592859, -0.891006524188, -0.898794046299, -0.906307787037, -0.913545457643, -0.920504853452, -0.927183854567, -0.933580426497, -0.939692620786, -0.945518575599, -0.951056516295, -0.956304755963, -0.961261695938, -0.965925826289, -0.970295726276, -0.974370064785, -0.978147600734, -0.981627183448, -0.984807753012, -0.987688340595, -0.990268068742, -0.992546151641, -0.994521895368, -0.996194698092, -0.99756405026, -0.998629534755, -0.999390827019, -0.999847695156, -1.0, -0.999847695156, -0.999390827019, -0.998629534755, -0.99756405026, -0.996194698092, -0.994521895368, -0.992546151641, -0.990268068742, -0.987688340595, -0.984807753012, -0.981627183448, -0.978147600734, -0.974370064785, -0.970295726276, -0.965925826289, -0.961261695938, -0.956304755963, -0.951056516295, -0.945518575599, -0.939692620786, -0.933580426497, -0.927183854567, -0.920504853452, -0.913545457643, -0.906307787037, -0.898794046299, -0.891006524188, -0.882947592859, -0.874619707139, -0.866025403784, -0.857167300702, -0.848048096156, -0.838670567945, -0.829037572555, -0.819152044289, -0.809016994375, -0.798635510047, -0.788010753607, -0.777145961457, -0.766044443119, -0.754709580223, -0.743144825477, -0.731353701619, -0.719339800339, -0.707106781187, -0.694658370459, -0.681998360062, -0.669130606359, -0.656059028991, -0.642787609687, -0.62932039105, -0.615661475326, -0.601815023152, -0.587785252292, -0.573576436351, -0.559192903471, -0.544639035015, -0.529919264233, -0.51503807491, -0.5, -0.484809620246, -0.469471562786, -0.45399049974, -0.438371146789, -0.422618261741, -0.406736643076, -0.390731128489, -0.374606593416, -0.358367949545, -0.342020143326, -0.325568154457, -0.309016994375, -0.292371704723, -0.275637355817, -0.258819045103, -0.2419218956, -0.224951054344, -0.207911690818, -0.190808995377, -0.173648177667, -0.15643446504, -0.13917310096, -0.121869343405, -0.104528463268, 0, 0, 0, 0, 0};
	public static double[] cosLookup = {1.0, 0.999847695156, 0.999390827019, 0.998629534755, 0.99756405026, 0.996194698092, 0.994521895368, 0.992546151641, 0.990268068742, 0.987688340595, 0.984807753012, 0.981627183448, 0.978147600734, 0.974370064785, 0.970295726276, 0.965925826289, 0.961261695938, 0.956304755963, 0.951056516295, 0.945518575599, 0.939692620786, 0.933580426497, 0.927183854567, 0.920504853452, 0.913545457643, 0.906307787037, 0.898794046299, 0.891006524188, 0.882947592859, 0.874619707139, 0.866025403784, 0.857167300702, 0.848048096156, 0.838670567945, 0.829037572555, 0.819152044289, 0.809016994375, 0.798635510047, 0.788010753607, 0.777145961457, 0.766044443119, 0.754709580223, 0.743144825477, 0.731353701619, 0.719339800339, 0.707106781187, 0.694658370459, 0.681998360062, 0.669130606359, 0.656059028991, 0.642787609687, 0.62932039105, 0.615661475326, 0.601815023152, 0.587785252292, 0.573576436351, 0.559192903471, 0.544639035015, 0.529919264233, 0.51503807491, 0.5, 0.484809620246, 0.469471562786, 0.45399049974, 0.438371146789, 0.422618261741, 0.406736643076, 0.390731128489, 0.374606593416, 0.358367949545, 0.342020143326, 0.325568154457, 0.309016994375, 0.292371704723, 0.275637355817, 0.258819045103, 0.2419218956, 0.224951054344, 0.207911690818, 0.190808995377, 0.173648177667, 0.15643446504, 0.13917310096, 0.121869343405, 0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -0.104528463268, -0.121869343405, -0.13917310096, -0.15643446504, -0.173648177667, -0.190808995377, -0.207911690818, -0.224951054344, -0.2419218956, -0.258819045103, -0.275637355817, -0.292371704723, -0.309016994375, -0.325568154457, -0.342020143326, -0.358367949545, -0.374606593416, -0.390731128489, -0.406736643076, -0.422618261741, -0.438371146789, -0.45399049974, -0.469471562786, -0.484809620246, -0.5, -0.51503807491, -0.529919264233, -0.544639035015, -0.559192903471, -0.573576436351, -0.587785252292, -0.601815023152, -0.615661475326, -0.62932039105, -0.642787609687, -0.656059028991, -0.669130606359, -0.681998360062, -0.694658370459, -0.707106781187, -0.719339800339, -0.731353701619, -0.743144825477, -0.754709580223, -0.766044443119, -0.777145961457, -0.788010753607, -0.798635510047, -0.809016994375, -0.819152044289, -0.829037572555, -0.838670567945, -0.848048096156, -0.857167300702, -0.866025403784, -0.874619707139, -0.882947592859, -0.891006524188, -0.898794046299, -0.906307787037, -0.913545457643, -0.920504853452, -0.927183854567, -0.933580426497, -0.939692620786, -0.945518575599, -0.951056516295, -0.956304755963, -0.961261695938, -0.965925826289, -0.970295726276, -0.974370064785, -0.978147600734, -0.981627183448, -0.984807753012, -0.987688340595, -0.990268068742, -0.992546151641, -0.994521895368, -0.996194698092, -0.99756405026, -0.998629534755, -0.999390827019, -0.999847695156, -1.0, -0.999847695156, -0.999390827019, -0.998629534755, -0.99756405026, -0.996194698092, -0.994521895368, -0.992546151641, -0.990268068742, -0.987688340595, -0.984807753012, -0.981627183448, -0.978147600734, -0.974370064785, -0.970295726276, -0.965925826289, -0.961261695938, -0.956304755963, -0.951056516295, -0.945518575599, -0.939692620786, -0.933580426497, -0.927183854567, -0.920504853452, -0.913545457643, -0.906307787037, -0.898794046299, -0.891006524188, -0.882947592859, -0.874619707139, -0.866025403784, -0.857167300702, -0.848048096156, -0.838670567945, -0.829037572555, -0.819152044289, -0.809016994375, -0.798635510047, -0.788010753607, -0.777145961457, -0.766044443119, -0.754709580223, -0.743144825477, -0.731353701619, -0.719339800339, -0.707106781187, -0.694658370459, -0.681998360062, -0.669130606359, -0.656059028991, -0.642787609687, -0.62932039105, -0.615661475326, -0.601815023152, -0.587785252292, -0.573576436351, -0.559192903471, -0.544639035015, -0.529919264233, -0.51503807491, -0.5, -0.484809620246, -0.469471562786, -0.45399049974, -0.438371146789, -0.422618261741, -0.406736643076, -0.390731128489, -0.374606593416, -0.358367949545, -0.342020143326, -0.325568154457, -0.309016994375, -0.292371704723, -0.275637355817, -0.258819045103, -0.2419218956, -0.224951054344, -0.207911690818, -0.190808995377, -0.173648177667, -0.15643446504, -0.13917310096, -0.121869343405, -0.104528463268, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.104528463268, 0.121869343405, 0.13917310096, 0.15643446504, 0.173648177667, 0.190808995377, 0.207911690818, 0.224951054344, 0.2419218956, 0.258819045103, 0.275637355817, 0.292371704723, 0.309016994375, 0.325568154457, 0.342020143326, 0.358367949545, 0.374606593416, 0.390731128489, 0.406736643076, 0.422618261741, 0.438371146789, 0.45399049974, 0.469471562786, 0.484809620246, 0.5, 0.51503807491, 0.529919264233, 0.544639035015, 0.559192903471, 0.573576436351, 0.587785252292, 0.601815023152, 0.615661475326, 0.62932039105, 0.642787609687, 0.656059028991, 0.669130606359, 0.681998360062, 0.694658370459, 0.707106781187, 0.719339800339, 0.731353701619, 0.743144825477, 0.754709580223, 0.766044443119, 0.777145961457, 0.788010753607, 0.798635510047, 0.809016994375, 0.819152044289, 0.829037572555, 0.838670567945, 0.848048096156, 0.857167300702, 0.866025403784, 0.874619707139, 0.882947592859, 0.891006524188, 0.898794046299, 0.906307787037, 0.913545457643, 0.920504853452, 0.927183854567, 0.933580426497, 0.939692620786, 0.945518575599, 0.951056516295, 0.956304755963, 0.961261695938, 0.965925826289, 0.970295726276, 0.974370064785, 0.978147600734, 0.981627183448, 0.984807753012, 0.987688340595, 0.990268068742, 0.992546151641, 0.994521895368, 0.996194698092, 0.99756405026, 0.998629534755, 0.999390827019, 0.999847695156};
	
	public static void moveDiagonally(int angle){
		/*---------------------------*/
		/* Get speeds and directions */
		/*---------------------------*/
		byte[] speeds = andreDiagonalSpeeds(angle);
		
		/*-----------------------*/
		/* Send directions first */
		/*-----------------------*/
		//EAST Wheel
		I2Csensor.sendData(0x01,speeds[0]); 
		
		//SOUTH Wheel
		I2Csensor.sendData(0x03,speeds[2]); 
		
		//NORTH Wheel
		I2Csensor.sendData(0x05,speeds[4]); 
		
		//WEST Wheel
		I2Csensor.sendData(0x07,speeds[6]);
		
		/*-----------------------*/
		/* Then all the speeds   */
		/*-----------------------*/
		I2Csensor.sendData(0x02,speeds[1]);
		I2Csensor.sendData(0x04,speeds[3]);
		I2Csensor.sendData(0x06,speeds[5]);
		I2Csensor.sendData(0x08,speeds[7]);
	}
	
	public static void stop() {
		//stop dead, I am not making a constant for this for added safety.
		I2Csensor.sendData(0x01,(byte)3); 
		I2Csensor.sendData(0x03,(byte)3); 
		I2Csensor.sendData(0x05,(byte)3); 
		I2Csensor.sendData(0x07,(byte)3); 
		
		//make the I2C safe again and idiot proof
		try {
			Thread.sleep(80);
		} catch (InterruptedException e) {
			e.printStackTrace();
		} //the best time I could get to make it stop faster
		
		I2Csensor.sendData(0x01,(byte)0);
		I2Csensor.sendData(0x02,(byte)0);
		I2Csensor.sendData(0x03,(byte)0);
		I2Csensor.sendData(0x04,(byte)0);
		I2Csensor.sendData(0x05,(byte)0);
		I2Csensor.sendData(0x06,(byte)0);
		I2Csensor.sendData(0x07,(byte)0);
		I2Csensor.sendData(0x08,(byte)0);
	}
	
	//if all else fails, here is the old way of stopping
	public static void oldStop() {
		//stop dead, I am not making a constant for this for added safety.
		I2Csensor.sendData(0x01,(byte)3); 
		I2Csensor.sendData(0x03,(byte)3); 
		I2Csensor.sendData(0x05,(byte)3); 
		I2Csensor.sendData(0x07,(byte)3); 
		
		//make the I2C safe again and idiot proof
		I2Csensor.sendData(0x01,off); 
		I2Csensor.sendData(0x02,off);
		I2Csensor.sendData(0x03,off);
		I2Csensor.sendData(0x04,off); 
		I2Csensor.sendData(0x05,off); 
		I2Csensor.sendData(0x06,off); 
		I2Csensor.sendData(0x07,off); 
		I2Csensor.sendData(0x08,off); 
	}
		
	/**
	 * Given an angle in DEGREES the method return an byte array consisting of
	 * the speeds and directions for all of the motors.
	 * 
	 * The motors on the robot are positioned as thus, with the arrow showing the
	 * movement direction for FORWARD.
	 *                        
	 *                      (4 and 5)                                  
	 *                        NORTH                           
	 *                                                        
	 *                         -->                       
	 *                         |                               
	 *                       __|__                            
	 *                      |  |  |     ^                      
	 * (6 and 7) WEST |--------x--------|  EAST (0 and 1)                 
	 *                v     |__|__|                           
	 *                         |                              
	 *                         |                              
	 *                       <--                             
	 *              	  
	 *                       SOUTH                          
	 *                     (2 and 3)                                   
	 * @param angle The angle in degrees to move diagonally at
	 * @return array - [EAST direction, EAST speed, SOUTH direction, SOUTH speed, NORTH direction, NORTH speed, WEST direction, WEST speed]
	 */
	public static byte[] andreDiagonalSpeeds(int angle) {
		// Init return array
		byte[] directionsAndSpeeds = new byte[8];
		
		for (int i = 0; i < 8; i++) {
			directionsAndSpeeds[i] = 0;
		}
		
		// Find the speeds and movement directions through trigonometry		
		final double horisontalMovement = cosLookup[angle];
		final double verticalMovement = sinLookup[angle];

		// Normalise values and get them to range [40, 200]
		double maxMovement = Math.max(Math.abs(horisontalMovement), Math.abs(verticalMovement));
		
		double maxSpeed = 160; // Actual MAXIMUM is maxSpeed + minSpeed :))
		double minSpeed = 40; 
		
		// Find final speeds, these are zero by default!
		byte horisontalSpeed = 0;
		byte verticalSpeed = 0;
		
		if (horisontalMovement != 0) {
			horisontalSpeed = (byte) (Math.min(Math.abs((maxSpeed * horisontalMovement / maxMovement)), maxSpeed) + minSpeed);
		}
		if (verticalMovement != 0) {
			verticalSpeed = (byte) (Math.min(Math.abs((maxSpeed * verticalMovement / maxMovement)), maxSpeed) + minSpeed);
		}

		/* Save motor speeds, they're at odd positions in the array (1, 3, 5, 7) */
		directionsAndSpeeds[EAST * 2 + 1] = verticalSpeed;
		directionsAndSpeeds[WEST * 2 + 1] = verticalSpeed;
		directionsAndSpeeds[NORTH * 2 + 1] = horisontalSpeed;
		directionsAndSpeeds[SOUTH * 2 + 1] = horisontalSpeed;

		/* Save motor directions, they're at even positions in the array (0, 2, 4, 6) */

		// Vertical movement controlled by east/west wheels
		if (verticalSpeed == 0) {
			// No movement :)
			directionsAndSpeeds[EAST * 2] =  off;
			directionsAndSpeeds[WEST * 2] =  off;
		} else {
			// Movement - boooyaaaah
			directionsAndSpeeds[EAST * 2] =  (verticalMovement > 0) ? forward : backward;
			directionsAndSpeeds[WEST * 2] =  (verticalMovement > 0) ? backward : forward;
		}

		// Horisontal movement controlled by north/south wheels
		if (horisontalSpeed == 0) {
			// No movement :(
			directionsAndSpeeds[NORTH * 2] =  off;
			directionsAndSpeeds[SOUTH * 2] =  off;
		} else {
			// Movement - boooyaaaah
			directionsAndSpeeds[NORTH * 2] =  (horisontalMovement > 0) ? forward : backward;
			directionsAndSpeeds[SOUTH * 2] =  (horisontalMovement > 0) ? backward : forward;
		}

		return directionsAndSpeeds;
	}
}
